@model ChatContext

@{
    Layout = "~/Views/Shared/_LayoutRenderBase.cshtml";
    var contacts = new HashSet<User>();
    contacts.UnionWith(Model.Host.Followers);
    contacts.UnionWith(Model.Host.Users);
}

<main class="container">
    <div class="contacts-container">
        <h2>Contacts</h2>
        @foreach (var user in contacts)
        {
            <a href="@Url.Action($"{user.UserName}")">
                <div class="contact-user">
                    <div class="profile-img">
                        <img src="@Url.Action("get-profile-image", "user", new { userName = user.UserName })"
                            alt="Profile Image" />
                    </div>
                    <div class="profile-name">@user.UserProfileName</div>
                </div>
            </a>
        }
    </div>
    <div class="messages-container">
        @if (Model.Guest == null)
        {
            <header class="info-container">
                <div class="profile-img">
                    <img src="@Url.Action("get-profile-image", "user", new { userName = Model.Host.UserName })"
                        alt="Profile Image" />
                </div>
                <div class="profile-name"><span>@Model.Host.UserName</span></div>
            </header>
            <strong style="position: absolute; transform: translate(-50%, 50%); top: 50%; left: 50%;">
                Selecione um usário para começar a conversar!
            </strong>
        }
        else
        {
            <header class="info-container">
                <div class="profile-img">
                    <img src="@Url.Action("get-profile-image", "user", new { userName = Model.Guest.UserName })"
                        alt="Profile Image" />
                </div>
                <div class="profile-name"><span>@Model.Guest.UserProfileName</span></div>
            </header>
            <main class="messages" id="message">

            </main>
            <footer>
                <div class="input-container">
                    <input type="text" name="" id="input-message" placeholder="Send message" />
                    <button type="submit" id="btn-submit">
                        <i class="fi fi-bs-paper-plane"></i>
                    </button>
                </div>
            </footer>
        }
    </div>
    <input type="hidden" value="@Model.Guest?.UserName" id="guest">
    <input type="hidden" value="@Model.Host.UserName" id="host">
</main>

@section links {
    <link rel="stylesheet" href="~/css/Chat.css" asp-append-version="true">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Josefin+Sans:ital,wght@0,100..700;1,100..700&display=swap"
        rel="stylesheet">
    <link rel='stylesheet' href='https://cdn-uicons.flaticon.com/2.6.0/uicons-bold-straight/css/uicons-bold-straight.css'>
}

@if (Model.Guest != null)
{
    @section scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"
        asp-fallback-src="~/libs/jQuery/js/jquery.min.js" asp-fallback-test="window.jQuery"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.7/signalr.js"
        asp-fallback-src="~/libs/signalR/signalr.js" asp-fallback-test="signalR"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/dayjs/1.11.13/dayjs.min.js"></script>
    <script src="~/js/chat.js" asp-append-version="true"></script>
    <script src="~/js/load-messages.js" asp-append-version="true"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/notification")
            .build();

        connection.on("ReceiveNotification", (user, message) => {
            $("<div>")
                .text("Nova notificação: " + message)
                .css({
                    position: 'fixed',
                    top: '10px',
                    right: '10px',
                    backgroundColor: '#f8f9fa',
                    border: '1px solid #ccc',
                    padding: '10px',
                    color: 'black',
                    borderRadius: '5px',
                    zIndex: 1000
                })
                .appendTo("body")
                .fadeIn(400)
                .delay(5000)
                .fadeOut(400, function () {
                });
        });

        connection.start().catch(err => console.error(err.toString()));
    </script>

    }
}
